module core;

#

public abstract type Source[+A] {
  public Option[A] tryTake();

  public A take() {
    return this.tryTake().get();
  }

  public Sequence[A] take(Int n) {
    # TODO
  }
}

public abstract type FiniteSource[+A] extends Source[A] {
  public Sequence[A] takeAll() {
    # TODO
  }

  public Sequence[A] takeUpTo(Int n) {
    # TODO
  }
}

public abstract type InfiniteSource[+A] extends Source[A] {
  public A take();

  public Some[A] tryTake() {
    return new Some[A](this.take());
  }
}

public type SingletonSource[+A] extends FiniteSource[A] {
  private Option[A] optValue;

  public Unit init(A value) {
    this.optValue = new Some[A](value);
  }

  public Option[A] tryTake() {
    Option[A] result = this.optValue;
    this.optValue = None();
    return result;
  }
}

public type EmptySource extends FiniteSource[Bottom] {
  private static EmptySource singleton = new EmptySource();

  private Unit init() {}

  public static EmptySource get() {
    return EmptySource.singleton;
  }

  public None tryTake() {
    return None();
  }
}
